#+title: parsing in j

* basic tree building operations

- emit :: splice some data into the current node
- node :: start a new node
- done :: finish a node (returning to the previous one)
- drop :: remove the last item (and all its children)
- goto :: go back to a node created earlier

* a simple tree-builder implementation

The tree is a rank 1 array of parent indices (where =__= indicates root/null)

Here is a straightforward imperative definition of our primitives:

#+begin_src j
  
  tree =: $0   NB. stores the links to parents.
  data =: $0   NB. stores the actual data items.
  path =: $0   NB. the stack of parent nodes.
  here =: _1   NB. the current parent node.
  
  emit =: monad define "0
    tree =: tree, here
    data =: data, y
  )
  
  node =: monad define "_
    path =: path, here
    here =: <: # tree
  )
  
  done =: monad define "_
    here =: {: path
    path =: }: path
  )
  
  drop =: monad define "_
    data =: }: data
    tree =: }: tree
  )
  
  goto =: monad define "_
    path =: path, here
    here =: y
  )
#+end_src


* queries

#+begin_src j
  upfrom =: 3 : 'if. y=_1 do. _1 else. y{tree end.'"0
  dnfrom =: 3 : 'if. 0=#y do. $0 else. I. +./"2 tree ="1 0 ;y end.'"1
  above =: (_1 -.~ }.)&(upfrom f.^:a:)"0
  below =: 13 : '; }. dnfrom each ^:a: < y'
  depth =: #@above
  treet =: 3 : '(i.#tree),.tree,.data' NB. tree table :)
  index =: 3 : '(i.#tree)'
#+end_src

* an example tree

#+begin_src j
  reset =: verb define
    tree =: path =: data =: $ >: here =: _1
  )
  tree0 =: verb define
    emit i. 5
    node''
    emit 44 45 46
    done''
    emit 5 6
    node''
    emit 60 61 62
    done''
    goto 4
    emit 44
    done''
    goto data i. 61
    emit 610 611
    done''
  )
#+end_src


* maybe later

#+begin_src j
  type =: $0   NB. a type marker for each node in the tree.
  tags =: $.$0 NB. sparse array holding meta data about nodes.
#+end_src

* references

Tree structure is based on:
http://www.jsoftware.com/jwiki/DevonMcCormick/Trees

Other helpful links:
http://www.jsoftware.com/jwiki/AlexMikhailov/Parsing
http://www.jsoftware.com/jwiki/Scripts/Scheme
