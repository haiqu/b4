#+TITLE: b4.00 : tasklist

* GOAL [5/5] get a single pixel to display on pascal/sdl vm
** DONE pixel.rx : draw a red pixel on the screen                        :rx:

We'll do this in retro first, so we know our vm works.

- You can test this at http://rx-core.org/demo/ 
- or unpack retro-11.4 and open ~www/demo/index.html~

#+begin_src retro
( pixel.rx : draw a pixel - rx is the customary retroforth extention )

( define the word "rx:pixel" )
: rx:pixel clear 320 200  ^canvas'red ^canvas'pixel ;

( now run it: )
rx:pixel
#+end_src

** DONE do it again, with the retro primitives

We can type ngaro assembler directly into retro.

It's actually doing something different than assembly: these words don't translate directly to the ngaro opcodes. Rather, they're retroforth words that /wrap/ the opcodes. But the result is the same.

How to do this came from this page:
  http://retroforth.org/docs/The_Ngaro_Virtual_Machine.html


*** Strike One.

I expected this to work 

#+begin_src retro

( -- clear screen ---- ) 
( port 2 is "character generator" )
(  - draws num on TOS as letter/number/etc )
(  - clears screen when TOS is negative )
-1 1 2 out,   ( write #1 to port #2 and let it pull the #-1 )
0 0 out, wait, ( port 0 requests a callback i/o event )

#+end_src


It didn't. Why? I'm thinking because each word is being executed as soon as the space is ecountered, and retro's saying "ok" is interfering with the port protocol.

So it looks like we have to define words. No problem, though. We can still use primitevs.

*** Creating a word works.

This works:

#+begin_src retro
( clear the screen)
: cls -1 1 2 out 0 0 out wait ;
#+end_src

(Just type ~cls~ after this definition... Will assume anyone reading this gets the idea by now and won't keep repeating. )

*** so we might as well refactor it:

#+begin_src retro

: send out wait ;
: to:callback 0 send;
: yield 0 to:callback send ;

: to:dumb-term  2 out ; ( because there's a smart one with color )
: cls -1 1 to:dumb-term yield ;

( now the color stuff )
( Ngaro colors are not the ANSI numbering I expect. But that's okay. The colors are all there. )

: to:canvas 6 send ;
: setink 1 to:canvas ;
: |r 4 setink ; ( |r was how I wrote "red" in the 90's )

( draw the pixel )
: putpx 2 to:canvas ;

( altogether now: one red pixel )
: 1rpx |r 320 200 putpx ; 

( and a blue one , in raw code: )
: 1bpx 1 1 6  out wait 325 200 2 6 out wait ;

: go cls 1rpx 1bpx ;

#+end_src

** DONE now do same in raw ngaro machine code
*** DONE hand-coded machine instructions in retroImage.js
:PROPERTIES:
:TS: <2012-08-02 07:34PM>
:ID: 8gkg3o50ntf0
:END:

/(marking this done even though it doesn't show the pixel in js, because this was really a fact-finding task)/

I spent /way/ too much time on this, and it still doesn't work. 

I can see it's doing everything I expect it to do in the js debugger, but nothing ever shows up.

I kind of think the JS implementation is relying on some hidden side effect inside the retroforth mainloop to flip the bit in port[ 0 ].

That is my only explanation for why this code doesn't work.

#+begin_src javascript

function loadImage()
{
  var lit = vm.LIT, wait=vm.WAIT, out=vm.OUT; // from ngaro.js

  image = [ 

      // set color to red:
      // : 4 1 6 out wait ;
      lit, 4, lit, 1, lit, 6, out, wait,

      // draw a pixel
      // : 320 200 2 6 out wait ;
      lit, 320, lit, 200, lit, 2, lit, 6, out, wait,

      // write 0 to port 3 to force video update. 
      lit, 0, lit, 3, out, // no wait necessary

      // infinite loop
      vm.JUMP, 0
  ];
 
  // change the jump target to the vm.JUMP instruction
  // so the code I'm trying to debug doesn't loop :)
  image[ image.length - 1 ] = image.length - 2;

  ip = 0;
}

#+end_src

On the plus side, I've learned a /ton/ about the vm's internals (especially thanks to crc (retro's main developer) on the #retro IRC channel. )

Will proceed with pascal vm interpretation

** DONE test program on existing ngaro vm
*** NOTE wound up tesing pretty thoroughly with ngaro.js
*** SKIP +get the C one to compile on ubuntu+
*** SKIP +name the file retroImage and make retro execute it+
** [6/11] implement just enough vm to run this program                  :pas:
*** program:  ngaro.pas
#+begin_src delphi :tangle "gen/ngaro.pas" :noweb tangle
  
  {$mode objfpc}
  program ngaro;
  uses crt;
  
    type int32 = longint;
  
    <<type:opcode>>
    <<opcode-mnemonics>>
  
    <<class:stack>>
    <<class:ngarovm>>
  
  var vm : ngarovm;
  begin
    vm.init();
    vm.loop();
  end.
    
#+end_src

*** [2/3] stack class
**** DONE definition

Not a direct port, but mostly inspired but what I saw when inspecting the ngaro.js stack objects:

#+name: class:stack
#+begin_src delphi
  
  type stack = object
    sp   : integer;          // stack pointer
    cell: array of int32;   // a standard forth term
    constructor init( len:word );
    procedure dup;
    procedure swap;
    procedure drop;
    procedure overflow;
    procedure underflow;
    procedure dump;
    procedure push( v: int32 );
    function tos: int32;
    function nos: int32;
    function pop: int32;
  end;
  
  <<def:stack.tos>>
  <<def:stack.nos>>
  <<def:stack.dup>>
  <<def:stack.drop>>
  <<def:stack.swap>>
  <<def:stack.push>>
  <<def:stack.pop>>
  <<def:stack.underflow>>
  <<def:stack.overflow>>
  <<def:stack.dump>>

#+end_src

**** [7/7] stack methods
***** DONE tos : top of stack
#+name: class:stack
#+begin_src delphi
  constructor stack.init( len: word );
  begin
    sp := 0;
    setlength( cell, len );
  end;
#+end_src

***** DONE tos : top of stack
#+name: def:stack.tos
#+begin_src delphi
  function stack.tos : int32;
  begin
    result := cell[ sp ];
  end;
#+end_src

***** DONE nos : next on stack
#+name: def:stack.nos
#+begin_src delphi
  function stack.nos : int32;
  begin
    result := cell[ sp - 1 ];
  end;
#+end_src

***** DONE dup : duplicate
#+name: def:stack.dup
#+begin_src delphi
  procedure stack.dup;
  begin
    push( tos );
  end;
#+end_src

***** DONE push 
#+name: def:stack.push
#+begin_src delphi
  procedure stack.push( v : int32 );
  begin
    inc( sp );
    if sp >= length( cell ) then overflow
    else cell[ sp ] := v;
  end;
#+end_src

***** DONE pop
#+name: def:stack.pop
#+begin_src delphi
  function stack.pop : int32;
  begin
    result := tos;
    drop;
  end;
#+end_src

***** DONE drop
#+name: def:stack.drop
#+begin_src delphi
  procedure stack.drop;
  begin
    dec( sp );
    if sp < 0 then underflow;
  end;
#+end_src

***** DONE swap
#+name: def:stack.swap
#+begin_src delphi
  procedure stack.swap;
    var t : int32;
  begin
    if sp >= 2 then
      begin
        t := tos;
        cell[ sp ] := nos;
        cell[ sp - 1 ] := t;
      end
    else underflow;
  end;
#+end_src

***** DONE overflow
#+name: def:stack.overflow
#+begin_src delphi
  procedure stack.overflow;
  begin
    writeln( 'warning: stack overflow' );
    sp := length( cell ) - 1;
  end;
#+end_src

***** DONE underflow
#+name: def:stack.underflow
#+begin_src delphi
  procedure stack.underflow;
  begin
    writeln( 'warning: stack underflow' );
    sp := 0;
  end;
#+end_src

***** DONE dump
#+name: def:stack.dump
#+begin_src delphi
  procedure stack.dump;
    var s: string;
    var i: int32;
  begin
    if sp > 0 then
      for i := 1 to sp  do
        begin
          str( cell[ i ], s );
          write( s, ' ' );
        end;
    writeln;
  end;
#+end_src

**** TODO check that we do these the ngaro way
***** TODO when does ngaro actually do on over/underflow checks?
***** TODO would nos really trigger underflow?
*** DONE ngarovm class
#+name: class:ngarovm
#+begin_src delphi
  
  type ngarovm = object
    ip    : integer;
    port  : array [ 0 .. 16 ] of int32;
    data, addr : stack;
    <<machine-code>>
    constructor init;
    procedure loop;
    procedure dump;
    procedure runop( op:int32 );
    procedure runio;
  end;
  
  <<@vmcode>>
  
  constructor ngarovm.init;
  begin
    data.init( 32 );
    addr.init( 32 );
    ip := 0;
  end;
  
#+end_src

*** TODO make stack sizes configurable
*** DONE define the opcodes
#+name: type:opcode
#+begin_src delphi
  
  const 
    oNOP  = 00;  oLIT  = 01;  oDUP = 02;   oDROP = 03;
    oSWAP = 04;  oPUSH = 05;  oPOP = 06;   oLOOP = 07;
    oJMP  = 08;  oRET  = 09;  oJLT = 10;   oJGT  = 11;
    oJNE  = 12;  oJEQ  = 13;  oLOD = 14;   oSTO = 15;
    oADD  = 16;  oSUB  = 17;  oMUL = 18;   oDIVM = 19;
    oAND  = 20;  oOR   = 21;  oXOR = 22;   oSHL = 23;
    oSHR  = 24;  oZEX  = 25;  oINC = 26;   oDEC = 27;
    oIN   = 28;  oOUT  = 29;  oWAIT = 30;

#+end_src

*** DONE give them strings for debugging
#+name: opcode-mnemonics
#+begin_src delphi
  
  const 
    mnemonic : array[ 0 .. 30 ] of string[ 5 ]
      = ( 'nop', 'lit', 'dup', 'drop',
          'swap', 'push', 'pop', 'loop',
          'jmp', 'ret', 'jlt', 'jgt',
          'jne', 'jeq', 'lod', 'sto',
          'add', 'sub', 'mul', 'divm',
          'and', 'or', 'xor', 'shl',
          'shr', 'zex', 'inc', 'dec',
          'in', 'out', 'wait'
        );
  
#+end_src

*** DONE simple state dump for vm
#+name: @vmcode
#+begin_src delphi
  
  procedure ngarovm.dump;
  var i: int32;
    var s: string[ 4 ];
  begin
    crt.clrscr;
    
    write( 'data :' ); data.dump;
    write( 'addr :' ); addr.dump;
    write( 'port :' );
    for i:= 0 to 15 do 
      begin
        str( port[ i ], s );
        write( s, ' ');
      end;
    writeln;
    
    { mini-debugger }
    i := 0;
    repeat 
      if i = ip 
      then write( ' -> ' )
      else write( '    ' );
      write( mnemonic[ ram[ i ]] );
      if ram[ i ] in [ oLIT, oLOOP, oJMP, oJGT, oJLT, oJNE, oJEQ ] then
        begin
          inc( i );
          str( ram[ i ], s );
          write(' ');
          write( s );
        end;
      writeln;
      inc( i );
    until i = length( self.ram );
    readln;
  end;
#+end_src


*** DONE load the image (machine code) into an array

Will just do this by hand for now, like I did with javascript, and worry about files when I build the assembler.

I figured using a set type would be cleaner, since it numbers implicitly but now I have to cast everything back to a number because we're mixing them with plain integers.

Probably cleaner would just be to use a file. :)

#+name: machine-code
#+begin_src delphi
  
  const ram : array [ 0 .. 25 ] of int32 = (
  
      // set color to red : 4 1 6 out wait ; 
      oLIT, 4,                    //  0  1
      oLIT, 1,                    //  2  3
      oLIT, 6,                    //  4  5
      oOUT, oWAIT,                //  6  7
            
      // draw a pixel
      // : 320 200 2 6 out wait ;
      oLIT, 320,                  //  8  9
      oLIT, 200,                  // 10 11
      oLIT, 2,                    // 12 13
      oLIT, 6,                    // 14 15
      oOUT, oWAIT,                // 16 17
  
      // write 0 to port 3 to force video update. 
      oLIT, 0,                    // 18 19
      oLIT, 3,                    // 20 21
      oOUT, oNOP,                 // 22 23
  
      oNOP, oNOP                  // 24 25
  
  );
  
#+end_src

*** DONE implement instruction pointer
#+name: @vmcode
#+begin_src delphi
      
  procedure ngarovm.loop( );
  begin
    repeat 
      dump;
      runop( ram[ ip ] );
      inc( ip );
    until ip >= length( ram );
  end;
  
#+end_src

*** TODO implement opcodes
**** DONE runop : dispatch function
#+name: @vmcode
#+begin_src delphi
  
  procedure ngarovm.runop( op: int32 );
    var t, n, a : int32;
  begin
    case op of
      oNOP : ; { do nothing }
      <<stack-ops>>
      <<branch-ops>>
      <<memory-ops>>
      <<alu-ops>>
      <<port-ops>>
    else
      writeln( 'don''t know how to handle op:', op );
      readln;
      <<user-ops>>
    end;
  end;
  
#+end_src

**** TODO user_ops
#+name: user-ops
#+begin_src delphi

{ ... }

#+end_src

**** DONE stack ops
#+name: stack-ops
#+begin_src delphi
  oDUP : data.push( data.tos );
  oDROP: data.drop;
  oSWAP: data.swap;
  oPUSH: addr.push( data.pop );
  oPOP : data.push( addr.pop );
#+end_src

**** TODO branch ops
#+name: branch-ops
#+begin_src delphi
  oLOOP: ;
  oJMP : ;
  oRET : ;
  oJLT : ;
  oJGT : ;
  oJNE : ;
  oJEQ : ;
  oZEX : ;
#+end_src

**** DONE memory ops
#+name: memory-ops
#+begin_src delphi
  oLIT: begin
          inc( ip );
          data.push( ram[ ip ]);
        end;
  oLOD: begin { FETCH }
          data.cell[ data.sp ] := ram[ data.tos ];
        end;
  oSTO: begin { STORE : (na-) - put nos into ram at tos }
          ram[ data.tos ] := ram[ data.nos ];
          data.drop; 
          data.drop;
        end;
#+end_src

**** DONE arithmetic/logic ops
#+name: alu-ops
#+begin_src delphi
  oADD : data.push( data.pop + data.pop );
  oSUB : data.push( -data.pop + data.pop );
  oMUL : data.push( -data.pop + data.pop );
  oDIVM: begin
           t := data.pop; 
           n := data.pop; 
           data.push( n div t ); 
           data.push( n mod t ); 
         end;
  oAND : data.push( data.pop AND data.pop );
  oOR  : data.push( data.pop OR data.pop );
  oXOR : data.push( data.pop XOR data.pop );
  oSHL : begin 
           t := data.pop; 
           data.push( data.pop shl t );
         end;
  oSHR : begin
           t := data.pop; 
           data.push( data.pop shr t );
         end;
  oINC : inc( data.cell[ data.sp ] );
  oDEC : dec( data.cell[ data.sp ] );
#+end_src

**** DONE port ops
#+name: port-ops
#+begin_src delphi
  oIN  : begin { p-n }
           t := data.pop;
           data.push( port[ t ] );
           port[ t ] := 0;
         end;
  oOUT : begin { np- }
           port[ data.pop ] := data.pop;
         end;
  oWAIT: begin { - }
           runio;
         end;
#+end_src

*** TODO implement io devices
**** TODO generic runio routine
#+name: @vmcode
#+begin_src delphi
  
  procedure ngarovm.runio;
    var p: int32;
  begin
    for p in port do port[ p ] := 0;
    writeln( 'io' );
  end;
  
#+end_src

*** TODO implement a pixel in sdl
*** TODO halt the program

* GOAL simple assembler in pascal
** TODO port pixel.hex to pixel.nga
*** NOTE Just use the syntax retro gives when you type =see=
#+begin_example
Retro 11.0 (1309798464)

ok  see ok 
1423 nop   
1424 nop   
1425 lit   4
1427 @     
1428 call  167
1429 0;    
1430 drop  
1431 call  421
1432 lit   54
1434 call  443
1435 ;     

ok  

#+end_example

* GOAL flesh out vm with more ngaro assembly programs
** TODO square : draw a square                                         :nga:
** TODO color  : draw the palette                                      :nga:
** TODO click  : click screen to change color                          :nga:
** TODO keys   : press any key to change color                         :nga:
** TODO hello  : show the word hello                                   :nga:
** TODO caps   : letters on screen (lowercase)                         :nga:
** TODO shift  : captital letters / shift key                          :nga:
** TODO color  : colored text input                                    :nga:
** TODO read   : read a file from disk                                 :nga:
** TODO write  : write a file to disk                                  :nga:
** TODO ngasm  : assembler for ngaro                                   :nga:

