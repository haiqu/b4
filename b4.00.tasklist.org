#+TITLE: b4.00 : tasklist

* [6/11] implement the virtual machine                                  :pas:
** TODO check that we do these the ngaro way
*** TODO when does ngaro actually do on over/underflow checks?
*** TODO would nos really trigger underflow?
** TODO make stack sizes configurable
** DONE load the image (machine code) into an array

Will just do this by hand for now, like I did with javascript, and worry about files when I build the assembler.

I figured using a set type would be cleaner, since it numbers implicitly but now I have to cast everything back to a number because we're mixing them with plain integers.

Probably cleaner would just be to use a file. :)

#+name: machine-code
#+begin_src delphi
  
  const ram : array [ 0 .. 25 ] of int32 = (
  
      // set color to red : 4 1 6 out wait ; 
      oLIT, 4,                    //  0  1
      oLIT, 1,                    //  2  3
      oLIT, 6,                    //  4  5
      oOUT, oWAIT,                //  6  7
            
      // draw a pixel
      // : 320 200 2 6 out wait ;
      oLIT, 320,                  //  8  9
      oLIT, 200,                  // 10 11
      oLIT, 2,                    // 12 13
      oLIT, 6,                    // 14 15
      oOUT, oWAIT,                // 16 17
  
      // write 0 to port 3 to force video update. 
      oLIT, 0,                    // 18 19
      oLIT, 3,                    // 20 21
      oOUT, oNOP,                 // 22 23
  
      oNOP, oNOP                  // 24 25
  
  );
  
#+end_src

** TODO implement io devices
** TODO implement a pixel in sdl
** TODO halt the program
* GOAL implement a simple assembler in pascal
** TODO port pixel.hex to pixel.nga
*** NOTE Just use the syntax retro gives when you type =see=
#+begin_example
Retro 11.0 (1309798464)

ok  see ok 
1423 nop   
1424 nop   
1425 lit   4
1427 @     
1428 call  167
1429 0;    
1430 drop  
1431 call  421
1432 lit   54
1434 call  443
1435 ;     

ok  

#+end_example

* GOAL flesh out vm with more ngaro assembly programs
** TODO square : draw a square                                         :nga:
** TODO color  : draw the palette                                      :nga:
** TODO click  : click screen to change color                          :nga:
** TODO keys   : press any key to change color                         :nga:
** TODO hello  : show the word hello                                   :nga:
** TODO caps   : letters on screen (uppercase)                         :nga:
** TODO shift  : captital letters / shift key                          :nga:
** TODO color  : colored text input                                    :nga:
** TODO read   : read a file from disk                                 :nga:
** TODO write  : write a file to disk                                  :nga:
** TODO ngasm  : assembler for ngaro                                   :nga:

