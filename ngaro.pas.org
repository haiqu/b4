#+TITLE: ngaro implementation in free pascal

* OVERVIEW :
** TYPE ngarovt
#+name: @interface
#+begin_src pascal
  type ngarovt = object
    constructor init;
  end;
#+end_src


* SECTION devices

** port handlers
# all of these were ported from ngaro.js, except file/io and enhanced text
*** portmap
#+begin_src pascal
  portHandlers[1] = handle_keyboard;
  portHandlers[2] = handle_write;
  portHandlers[3] = handle_refresh;
  portHandlers[4] = handle_fileio;
  portHandlers[5] = handle_vmquery;
  portHandlers[6] = handle_canvas;
  portHandlers[7] = handle_mouse;
  portHandlers[8] = handle_term;
#+end_src
*** ITEM port 0 : i/o events

Port 0 isn't connected to a device. It's just used to signal that one side or the other has data to transfer.

*** TODO port 1 : keyboard
**** keyboard events
  TYPE KeyboardEvent = SDL.TSDL_KeyboardEvent;
****
  if (ports[1] == 1 && inputMethod == 0)
  {
    ports[1] = lastKey;
    lastKey = 0;
    return;
  }
  if (ports[1] == 1 && inputMethod == 1)
  {
    ports[1] = tib.charCodeAt(0);
    tib = tib.substr(1, tib.length - 1);
    lastKey = 0;
    return;
  }

*** TODO port 2 : simple text output

portHandlers[2] = function()
{
  Term.renderChar( data.pop );
  ports[ 2 ] = 0;
}

*** TODO port 3 : video update

This can probably be used for double-buffered graphics.

*** TODO port 4 : file i/o
#+begin_src pascal
  function handle_file_io( msg : integer ) : integer;
  begin
    saveimage;
    result := 0;
  end;
#+end_src

*** TODO port 5 : querying the vm { need date/time }
#+begin_src pascal
  function handle_vmquery( msg: integer ) : integer;
  begin
    case msg of
      -1  : result := IMAGE_SIZE;
      -2  : result := FB_EXISTS;
      -3  : result := FB_WIDTH;
      -4  : result := FB_HEIGHT;
      -5  : result := data.sp;
      -6  : result := addr.sp;
      -7  : result := -1;
      -8  : begin
              {
                var foo = new Date;
                var unixtime_ms = foo.getTime();
                var unixtime = parseInt(unixtime_ms / 1000);
                result : = unixtime;
                }
            end;
      -9  : result := 0;
      -11 : result := TERM_WIDTH;
      -12 : result := TERM_HEIGHT;
      else
        result := -1
    end
  end;
#+end_src

*** TODO port 6 : canvas
#+begin_src pascal
  function handle_canvas( msg: integer ) : integer;
    var x, y, h, w : integer;
  begin
    result := 0;
    case msg of
      1 : rxCanvasSetColor(data.pop);
      2 : begin
            data.pop2( y, x );
            fb.fillRect(x, y, 2, 2);
          end;
      3 : begin
            data.pop4( w, h, y, x );
            fb.strokeRect(x, y, w, h);
          end;
      4 : begin
            data.pop4( w, h, y, x );
            fb.fillRect(x, y, w, h);
          end;
      5 : begin
            data.pop3( h, y, x );
            fb.fillRect(x, y, 2, h);
          end;
      6 : begin
            data.pop3( w, y, x );
            fb.fillRect(x, y, w, 2);
          end;
      7 : begin
            data.pop3( w, y, x );
            fb.beginPath;
            fb.arc(x, y, w, 0, Math.PI*2, true);
            fb.closePath();
            fb.stroke();
          end;
      8 : begin
            data.pop3( w, y, x );
            fb.beginPath;
            fb.arc(x, y, w, 0, Math.PI*2, true);
            fb.closePath;
            fb.fill;
          end
      else
        result := -1;
    end
  end;
#+end_src

*** TODO port 7 : mouse ( fill in mx, my )
#+begin_src pascal
  function handle_mouse( msg : integer ) : integer;
  begin
    result := 0;
    case msg of
      1 : data.push2( mx, my );
      2 : data.push( mb );
      else
        result := -1;
    end;
  end;
#+end_src

*** TODO port 8 : enhanced text output
**** msg 1 : ( rc- ) row col
**** msg 2 : ( n-  ) fg
**** msg 3 : ( n-  ) bg



* END
