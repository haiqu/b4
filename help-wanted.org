#+TITLE: help wanted


This file is for ongoing work on the b4 system in general.

For the game jam: please just go to the IRC channel at irc.freenode.net and join channel #b4 .


.

.

.

.

.

.




* NOTE about this file
** ~[#A]~ is easy, ~[#B]~ medium, ~[#C]~ advanced
** i'm working through file:b4.00.tasklist.org from top to bottom
*** usually discover i need something out of order though
*** probably best to chat on freenode/#b4 if you want to work on main tasklist
** licensing issues
- if you contribute / port something, make sure license is MIT/ [[http://en.wikipedia.org/wiki/ISC_license][ISC]] compatible ([[http://retroforth.org/license.html][retroforth license]] is ISC)
- [[http://www.freepascal.org/faq.var#general-license][freepascal]] code has a tendency to use MPL/LGPL style. I'm okay with that, too.

* Things b4 will need soon

** assembler in pascal
*** probably similar to  [[https://github.com/oriontransfer/PL0-Language-Tools/blob/master/pl0_assemblera.py][pl/0 language tools assembler.py]]
**** [#A] not clear what license is. author seems like nice guy. ask?
**** [#B] port to pascal, or write our own. (should be small code)

** need to be in ngaro assembly language
*** database (b4 has tiny relational database)
**** [#C] [[http://en.wikipedia.org/wiki/B-tree][b-tree]] or [[http://en.wikipedia.org/wiki/B%2B_tree][b+-tree]] implementation                           :nga:
**** [#A] codd's 8 relational operators                              :nga:

There is psuedocode for all 8 here.

http://science.kennesaw.edu/~mguimara/3310/RA_SQL.htm

*** [#A] recode the font from [[http://256.io/escapes.js/][escapes.js]] 

*** [#B] repl - probably follow itsyforth model
**** [#A] track down itsyforth license - ask john metcalf?
***** [[http://www.retroprogramming.com/2012/03/itsy-forth-1k-tiny-compiler.html][itsyforth interpreter]]


** TODO port gamesketchlib to ngaro/retroforth/b4

I made the java/processing game library at http://gamesketchlib.org/ and will try to follow the same design patterns as I work on this system.


** WANT python bytecode -> ngaro translator
*** [#A] research step : match up the two sets of bytecode

ngaro only has 30 instructions, i python has around the same. There is much overlap, and in forth-like languages, it's very easy to translate things like this.

So it's possible that at least some python code should be able to run here. 

The first step would be to compile a table that compares and contrasts the two sets of bytecode:

[[http://docs.python.org/library/dis.html][python dis module]] and the opcode section in [[http://retroforth.org/docs/The_Ngaro_Virtual_Machine.html][ngaro-vm reference]]

*** ?? pending above step, add new primitives to let us run python

probably the most dynamic aspects of python will not run well, but simpler python code probably can. 


* forth-like code
** NOTE if you write the code in ANS forth we can (hopefully) translate directly
** NOTE retro / joy / factor / ngaro


* Things that would just be nice to have

** WANT modfile player.

I would really really like a modfile player for retro sounds and music. (don't know what modfiles are? see http://modarchive.org/ )

#+begin_quote me

[13:04] <dom96> I always wanted to compete in Ludum Dare. Sadly, nowadays there isn't enough time.
[13:05] <tangentstorm> http://web.archive.org/web/20080704164939/http://turcanator.tangentcode.com/
[13:05] <tangentstorm> this is a midi sequencer i wrote in pygame... i would love it if someone took that and turned it into the music engine for this system.
[13:06] <tangentstorm> not the graphics part... but the time/synchronization code for the music events
[13:07] <tangentstorm> to make something like this: http://www.photonstorm.com/flod

#+end_quote


** emacs mode for colorforth-like languages

B4 is a a colorized language: you syntax-highlight it yourself, to simplify the parser, and words change meaning (verb tense) based on color.

This looks promising:

http://www.strangegizmo.com/forth/ColorForth/msg00263.html

I have already written a partial retroforth mode in file://etc/retro-mode.el


** render org-files to something more readable.                      :elisp:
*** github makes org-code ugly
*** [#A] org itself does better job... make me a macro?
**** http://orgmode.org/
**** http://orgmode.org/worg/org-contrib/babel/ 

